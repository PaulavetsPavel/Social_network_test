{"version":3,"file":"static/js/868.cd76e31a.chunk.js","mappings":"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","sources":["webpack://social_network_react/./src/Components/Common/FormsControls/FormsControl.module.scss?7b10","Components/Common/FormsControls/FormsControls.jsx","Components/Login/LoginPage.module.scss","webpack://social_network_react/./src/Components/Login/LoginForm.module.scss?4594","Components/Login/LoginForm.jsx","Components/Login/LoginPage.jsx","Utils/Validators/Validators.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControl_formControl__Bxpxz\",\"error\":\"FormsControl_error__YlffT\",\"field\":\"FormsControl_field__nYN8h\"};","import classes from './FormsControl.module.scss'\r\nimport { Field } from 'redux-form'\r\nimport React from 'react'\r\n\r\n\r\nexport const FormControl = ({ meta: { touched, error }, children }) => {\r\n  const hasError = touched && error\r\n  \r\n  return (<div className = { `${ classes.formControl } ${ hasError\r\n      ? classes.error\r\n      : '' }` }>\r\n    { children }\r\n    { hasError && <span>{ error }</span> }</div>)\r\n}\r\n\r\nexport const Input = (props) => {\r\n  return < FormControl { ...props }><input { ...props.input } { ...props } /></FormControl>\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n  return < FormControl { ...props }><textarea { ...props.input } { ...props } /></FormControl>\r\n}\r\n\r\nexport const createField = (component, name, placeholder, validators, props = {}, text = '') => {\r\n  return <div className = { classes.field }>\r\n    <Field component = { component }\r\n        name = { name }\r\n        placeholder = { placeholder }\r\n        validate = { validators }\r\n        { ...props } />{ text && <span>{ text }</span> }\r\n  </div>\r\n}","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"LoginForm_wrapper__bMGDQ\",\"container\":\"LoginForm_container__atUdT\",\"inputBox\":\"LoginForm_inputBox__bdXtv\",\"box\":\"LoginForm_box__1j5Ws\",\"icon\":\"LoginForm_icon__Ye8Qf\",\"checkbox\":\"LoginForm_checkbox__A4wHd\",\"loginError\":\"LoginForm_loginError__8QZy0\",\"captcha\":\"LoginForm_captcha__7XZ8w\"};","import { maxLengthCreator, requiredField } from '../../Utils/Validators/Validators.js'\r\nimport { reduxForm } from 'redux-form'\r\nimport { createField, Input } from '../Common/FormsControls/FormsControls.jsx'\r\nimport classes from './LoginForm.module.scss'\r\nimport React from 'react'\r\n\r\n\r\nconst maxLength30 = maxLengthCreator(30)\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst LoginForm = ({ handleSubmit, error, captchaUrl }) => {\r\n  return (<div className = { classes.wrapper }>\r\n    <div className = { classes.container }>\r\n      <form onSubmit = { handleSubmit }>\r\n        <h3>Log In</h3>\r\n        { error &&\r\n            <div className = { classes.loginError }>{ error }</div> }\r\n        <div className = { classes.inputBox }>\r\n          <span>Login (email)</span>\r\n          <div className = { classes.box }>\r\n            <div className = { classes.icon }>\r\n              <ion-icon name = 'person' />\r\n            </div>\r\n            { createField(Input, 'email', 'free@samuraijs.com', [ requiredField,\r\n              maxLength30 ]) }\r\n          </div>\r\n        </div>\r\n        <div className = { classes.inputBox }>\r\n          <span>Password</span>\r\n          <div className = { classes.box }>\r\n            <div className = { classes.icon }>\r\n              <ion-icon name = 'lock-closed' />\r\n            </div>\r\n            { createField(Input, 'password', 'free', [ requiredField,\r\n              maxLength10 ], { type: 'password' }) }\r\n          </div>\r\n        </div>\r\n        <div className = { classes.checkbox }>\r\n          { createField(Input, 'rememberMe', 'rememberMe', [], { type: 'checkbox' }, 'remember me') }\r\n        </div>\r\n        { captchaUrl &&\r\n            <div className = { classes.captcha }><img src = { captchaUrl }\r\n                alt = 'captcha' />\r\n              { createField(Input, 'captcha', 'Symbols from image', [ requiredField ]) }\r\n            </div> }\r\n        <div className = { classes.box }>\r\n          <button>Log in</button>\r\n        </div>\r\n      \r\n      </form>\r\n    </div>\r\n  </div>)\r\n}\r\nexport const LoginReduxForm = reduxForm({\r\n  form: 'Login',\r\n})(LoginForm)","import { connect } from 'react-redux'\r\nimport { Login } from '../../Redux/auth-reducer.js'\r\nimport classes from './LoginPage.module.scss'\r\nimport { Navigate } from 'react-router-dom'\r\nimport React from 'react'\r\nimport { LoginReduxForm } from './LoginForm.jsx'\r\n\r\n\r\nconst LoginPage = (props) => {\r\n  const onSubmitLogin = (formData) => {\r\n    props.Login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n  }\r\n  \r\n  if(props.isAuth) {\r\n    return <Navigate to = { '/profile' } />\r\n  }\r\n  return (<div className = { classes.wrapper }>\r\n    <LoginReduxForm onSubmit = { onSubmitLogin } captchaUrl={props.captchaUrl}  />\r\n  </div>)\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n  captchaUrl:state.auth.captchaUrl\r\n})\r\n\r\nexport default connect(mapStateToProps, { Login })(LoginPage)","export const requiredField = (value) => {\r\n  if (value) {\r\n    return undefined\r\n  }\r\n  return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n  if (value && value.length > maxLength) {\r\n    return `Max length is ${ maxLength } symbols`\r\n  }\r\n  return undefined\r\n}"],"names":["FormControl","meta","touched","error","children","hasError","className","classes","Input","props","input","Textarea","createField","component","name","placeholder","validators","text","Field","validate","maxLength30","maxLengthCreator","maxLength10","LoginReduxForm","reduxForm","form","handleSubmit","captchaUrl","onSubmit","requiredField","type","src","alt","connect","state","isAuth","auth","Login","to","formData","email","password","rememberMe","captcha","value","maxLength","length"],"sourceRoot":""}